{"version":3,"sources":["components/Satellites.js","components/data-loader-json.js","components/Planets.js","App.js","serviceWorker.js","index.js"],"names":["Satellites","props","react_default","a","createElement","es","width","height","headerHeight","rowHeight","rowCount","satellites","length","rowGetter","_ref2","index","rowClassName","_ref","label","dataKey","className","data_loader_json","loadAllPlanets","callBack","planets","loadSatellites","planet","filter","s","planetId","id","loadAllSatellites","Planets","state","selectedPlanet","showMoons","_this","dataLoader","data","setState","_rowClassName","satellitesHeader","_this2","this","planetName","name","showAllButton","onClick","planetSpan","onRowClick","rowData","components_Satellites","_this3","_this4","Component","App","components_Planets","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3c1cf486.chunk.js","sourcesContent":["import React from 'react';\nimport { Column, Table } from 'react-virtualized';\n\nconst Satellites = (props) => {\n\n  const _rowClassName = ({index}) => {\n    if (index % 2 === 0) {\n      return \"oddRow\";\n    }\n  }\n\n  return(\n    <Table width={545}\n           height={514}\n           headerHeight={90}\n           rowHeight={40}\n           rowCount={props.satellites.length}\n           rowGetter={({ index }) => props.satellites[index]}\n           rowClassName={_rowClassName}\n    >\n      <Column label='Name' dataKey='name' width={105} className='text' />\n      <Column label='GM' dataKey='gm' width={95} />\n      <Column label='Radius' dataKey='radius' width={75} />\n      <Column label='Density' dataKey='density' width={75} />\n      <Column label='Magnitude' dataKey='magnitude' width={105} />\n      <Column label='Albedo' dataKey='albedo' width={70} />\n    </Table>\n  )\n\n}\n\nexport default Satellites\n\n","import planets from './../data/planets.json';\nimport satellites from './../data/satellites.json';\n\nexport default {\n\n  // Loads all planets in the Solar System.\n  loadAllPlanets: callBack => {\n    callBack(planets);\n  },\n\n  // Loads satellites belonging to the given planet.\n  loadSatellites: (planet, callBack) => {\n    callBack(satellites.filter(s => s.planetId === planet.id));\n  },\n\n  // Loads satellites of all planets in the Solar System.\n  loadAllSatellites: callBack => {\n    callBack(satellites);\n  }\n\n}\n\n","import React, { Component } from 'react';\nimport Satellites from './Satellites'\nimport { Column, Table } from 'react-virtualized';\nimport dataLoader from './data-loader-json.js'\n\n// styles\nimport '../css-react-virtualized/styles.css'; // only needs to be imported once\nimport '../css/components/table.css';\nimport '../css/components/components.css';\n\nclass Planets extends Component {\n\n  state = {\n    planets: [],\n    selectedPlanet: null,\n    satellites: []\n  }\n\n  showMoons = (planet) => {\n    if (planet === this.state.selectedPlanet) {\n      this.loadAllSatellites();\n    } else {\n      dataLoader.loadSatellites(planet, data =>\n        this.setState({\n          satellites: data,\n          selectedPlanet: planet\n        })\n      );\n    }\n  }\n\n  _rowClassName = ({index}) => {\n    if (this.state.selectedPlanet === this.state.planets[index]) {\n      return 'selectedRow';\n    }\n    if (index % 2 === 0) {\n      return 'oddRow';\n    }\n  }\n\n  render() {\n    const selectedPlanet = this.state.selectedPlanet;\n    const satellites = this.state.satellites;\n    const planetName = selectedPlanet === null ? null : selectedPlanet.name;\n\n    const showAllButton = selectedPlanet\n      ? <span> (<button className='ahref' onClick={() => this.loadAllSatellites()}>show all satellites</button>)</span>\n      : ' (select a planet above to filter satellites)';\n\n    const planetSpan = <span className='highlight'>{planetName}</span>\n    let satellitesHeader;\n    if (satellites.length === 0) {\n      satellitesHeader = <span>Planet {planetSpan} does not have any satellites</span>\n    } else { // render table with satellites\n      satellitesHeader = planetName === null\n        ? 'Satellites of all planets'\n        : <span>Satellites of planet {planetSpan}</span>\n    }\n    satellitesHeader = <span className='header'>{satellitesHeader}</span>\n\n    return (\n      <div>\n\n        <span className='header'>Planets of our Solar System</span>\n\n        <Table width={1950}\n               height={450}\n               headerHeight={90}\n               rowHeight={40}\n               rowCount={this.state.planets.length}\n               rowGetter={({ index }) => this.state.planets[index]}\n               rowClassName={this._rowClassName}\n               onRowClick={(props) => this.showMoons(props.rowData)}\n               >\n          <Column label='Name' dataKey='name' width={70} className='text' />\n          <Column label='Moons' dataKey='numberOfMoons' width={70} />\n          <Column label='Mass' dataKey='mass' width={70} />\n          <Column label='Diameter' dataKey='diameter' width={90} />\n          <Column label='Density' dataKey='density' width={70} />\n          <Column label='Gravity' dataKey='gravity' width={70} />\n          <Column label='Escape Velocity' dataKey='escapeVelocity' width={80} />\n          <Column label='Rotation Period' dataKey='rotationPeriod' width={80} />\n          <Column label='Length Of Day' dataKey='lengthOfDay' width={80} />\n          <Column label='Distance From Sun' dataKey='distanceFromSun' width={80} />\n          <Column label='Perihelion' dataKey='perihelion' width={100} />\n          <Column label='Aphelion' dataKey='aphelion' width={90} />\n          <Column label='Orbital Period' dataKey='orbitalPeriod' width={70} />\n          <Column label='Orbital Velocity' dataKey='orbitalVelocity' width={80} />\n          <Column label='Orbital Inclination' dataKey='orbitalInclination' width={100} />\n          <Column label='Orbital Eccentricity' dataKey='orbitalEccentricity' width={100} />\n          <Column label='Obliquity To Orbit' dataKey='obliquityToOrbit' width={80} />\n          <Column label='Mean Temperature' dataKey='meanTemperature' width={115} />\n          <Column label='Surface Pressure' dataKey='surfacePressure' width={80} />\n        </Table>\n\n        <br/>\n        <div>\n          {satellitesHeader}{showAllButton}\n        </div>\n\n        <Satellites planet={this.state.selectedPlanet} satellites={this.state.satellites} />\n\n      </div>\n    )\n  }\n\n  // TODO: Put the two columns below back to the table and fix their data.\n  //<Column label='Has Ring System' dataKey='hasRingSystem' width={80} className='text' />\n  //<Column label='Has Global Magnetic Field' dataKey='hasGlobalMagneticField' width={80} className='text' />\n\n  componentDidMount() {\n    dataLoader.loadAllPlanets(data =>\n      this.setState({\n        planets: data\n      })\n    );\n\n    this.loadAllSatellites();\n  }\n\n  loadAllSatellites() {\n    dataLoader.loadAllSatellites(data =>\n      this.setState({\n        satellites: data,\n        selectedPlanet: null\n      })\n    );\n  }\n\n}\n\nexport default Planets;\n\n","import React, { Component } from 'react';\nimport Planets from './components/Planets';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Planets/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}