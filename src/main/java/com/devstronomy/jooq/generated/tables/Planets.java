/*
 * This file is generated by jOOQ.
 */
package com.devstronomy.jooq.generated.tables;


import com.devstronomy.jooq.generated.Devstronomy;
import com.devstronomy.jooq.generated.Indexes;
import com.devstronomy.jooq.generated.Keys;
import com.devstronomy.jooq.generated.tables.records.PlanetsRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Planets extends TableImpl<PlanetsRecord> {

    private static final long serialVersionUID = -1774709056;

    /**
     * The reference instance of <code>devstronomy.planets</code>
     */
    public static final Planets PLANETS = new Planets();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlanetsRecord> getRecordType() {
        return PlanetsRecord.class;
    }

    /**
     * The column <code>devstronomy.planets.id</code>.
     */
    public final TableField<PlanetsRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>devstronomy.planets.planet</code>.
     */
    public final TableField<PlanetsRecord, String> PLANET = createField("planet", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>devstronomy.planets.mass</code>.
     */
    public final TableField<PlanetsRecord, BigDecimal> MASS = createField("mass", org.jooq.impl.SQLDataType.DECIMAL(16, 6).nullable(false), this, "");

    /**
     * The column <code>devstronomy.planets.diameter</code>.
     */
    public final TableField<PlanetsRecord, BigDecimal> DIAMETER = createField("diameter", org.jooq.impl.SQLDataType.DECIMAL(16, 6).nullable(false), this, "");

    /**
     * The column <code>devstronomy.planets.density</code>.
     */
    public final TableField<PlanetsRecord, BigDecimal> DENSITY = createField("density", org.jooq.impl.SQLDataType.DECIMAL(16, 6).nullable(false), this, "");

    /**
     * The column <code>devstronomy.planets.gravity</code>.
     */
    public final TableField<PlanetsRecord, BigDecimal> GRAVITY = createField("gravity", org.jooq.impl.SQLDataType.DECIMAL(16, 6).nullable(false), this, "");

    /**
     * The column <code>devstronomy.planets.escape_velocity</code>.
     */
    public final TableField<PlanetsRecord, BigDecimal> ESCAPE_VELOCITY = createField("escape_velocity", org.jooq.impl.SQLDataType.DECIMAL(16, 6).nullable(false), this, "");

    /**
     * The column <code>devstronomy.planets.rotation_period</code>.
     */
    public final TableField<PlanetsRecord, BigDecimal> ROTATION_PERIOD = createField("rotation_period", org.jooq.impl.SQLDataType.DECIMAL(16, 6).nullable(false), this, "");

    /**
     * The column <code>devstronomy.planets.length_of_day</code>.
     */
    public final TableField<PlanetsRecord, BigDecimal> LENGTH_OF_DAY = createField("length_of_day", org.jooq.impl.SQLDataType.DECIMAL(16, 6).nullable(false), this, "");

    /**
     * The column <code>devstronomy.planets.distance_from_sun</code>.
     */
    public final TableField<PlanetsRecord, BigDecimal> DISTANCE_FROM_SUN = createField("distance_from_sun", org.jooq.impl.SQLDataType.DECIMAL(16, 6).nullable(false), this, "");

    /**
     * The column <code>devstronomy.planets.perihelion</code>.
     */
    public final TableField<PlanetsRecord, BigDecimal> PERIHELION = createField("perihelion", org.jooq.impl.SQLDataType.DECIMAL(16, 6).nullable(false), this, "");

    /**
     * The column <code>devstronomy.planets.aphelion</code>.
     */
    public final TableField<PlanetsRecord, BigDecimal> APHELION = createField("aphelion", org.jooq.impl.SQLDataType.DECIMAL(16, 6).nullable(false), this, "");

    /**
     * The column <code>devstronomy.planets.orbital_period</code>.
     */
    public final TableField<PlanetsRecord, BigDecimal> ORBITAL_PERIOD = createField("orbital_period", org.jooq.impl.SQLDataType.DECIMAL(16, 6).nullable(false), this, "");

    /**
     * The column <code>devstronomy.planets.orbital_velocity</code>.
     */
    public final TableField<PlanetsRecord, BigDecimal> ORBITAL_VELOCITY = createField("orbital_velocity", org.jooq.impl.SQLDataType.DECIMAL(16, 6).nullable(false), this, "");

    /**
     * The column <code>devstronomy.planets.orbital_inclination</code>.
     */
    public final TableField<PlanetsRecord, BigDecimal> ORBITAL_INCLINATION = createField("orbital_inclination", org.jooq.impl.SQLDataType.DECIMAL(16, 6).nullable(false), this, "");

    /**
     * The column <code>devstronomy.planets.orbital_eccentricity</code>.
     */
    public final TableField<PlanetsRecord, BigDecimal> ORBITAL_ECCENTRICITY = createField("orbital_eccentricity", org.jooq.impl.SQLDataType.DECIMAL(16, 6).nullable(false), this, "");

    /**
     * The column <code>devstronomy.planets.obliquity_to_orbit</code>.
     */
    public final TableField<PlanetsRecord, BigDecimal> OBLIQUITY_TO_ORBIT = createField("obliquity_to_orbit", org.jooq.impl.SQLDataType.DECIMAL(16, 6).nullable(false), this, "");

    /**
     * The column <code>devstronomy.planets.mean_temperature</code>.
     */
    public final TableField<PlanetsRecord, BigDecimal> MEAN_TEMPERATURE = createField("mean_temperature", org.jooq.impl.SQLDataType.DECIMAL(16, 6).nullable(false), this, "");

    /**
     * The column <code>devstronomy.planets.surface_pressure</code>.
     */
    public final TableField<PlanetsRecord, BigDecimal> SURFACE_PRESSURE = createField("surface_pressure", org.jooq.impl.SQLDataType.DECIMAL(16, 6), this, "");

    /**
     * The column <code>devstronomy.planets.number_of_moons</code>.
     */
    public final TableField<PlanetsRecord, Integer> NUMBER_OF_MOONS = createField("number_of_moons", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>devstronomy.planets.has_ring_system</code>.
     */
    public final TableField<PlanetsRecord, Boolean> HAS_RING_SYSTEM = createField("has_ring_system", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>devstronomy.planets.has_global_magnetic_field</code>.
     */
    public final TableField<PlanetsRecord, Boolean> HAS_GLOBAL_MAGNETIC_FIELD = createField("has_global_magnetic_field", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * Create a <code>devstronomy.planets</code> table reference
     */
    public Planets() {
        this(DSL.name("planets"), null);
    }

    /**
     * Create an aliased <code>devstronomy.planets</code> table reference
     */
    public Planets(String alias) {
        this(DSL.name(alias), PLANETS);
    }

    /**
     * Create an aliased <code>devstronomy.planets</code> table reference
     */
    public Planets(Name alias) {
        this(alias, PLANETS);
    }

    private Planets(Name alias, Table<PlanetsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Planets(Name alias, Table<PlanetsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Planets(Table<O> child, ForeignKey<O, PlanetsRecord> key) {
        super(child, key, PLANETS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Devstronomy.DEVSTRONOMY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PLANETS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<PlanetsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PLANETS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PlanetsRecord> getPrimaryKey() {
        return Keys.KEY_PLANETS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PlanetsRecord>> getKeys() {
        return Arrays.<UniqueKey<PlanetsRecord>>asList(Keys.KEY_PLANETS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Planets as(String alias) {
        return new Planets(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Planets as(Name alias) {
        return new Planets(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Planets rename(String name) {
        return new Planets(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Planets rename(Name name) {
        return new Planets(name, null);
    }
}
